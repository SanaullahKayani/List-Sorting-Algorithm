#---------simple bubble sort 1 ---------#

ary = [8,2, 1, 7,5, 4, 3]
def bbl(ary):
    for i in range(len(ary)-1):
        for j in range(len(ary)-1):
            if ary[j]>ary[j+1]:
                temp = ary[j]
                ary[j] = ary[j+1]
                ary[j+1] = temp
    return ary
bbl(ary)

#--------- insertion sort 1 ---------#
def insertionSorting(arr): 
  
    for i in range(1, len(arr)): 
  
        tmp = arr[i] 
        j = i-1
        while j >=0 and  arr[j]>tmp  : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = tmp
    return arr


arr = [21, 7,9, 13, 5, 6,8] 
insertionSorting(arr) 

#--------- binary search ---------#
alist = [0, 1, 2, 8, 13, 17, 19, 32, 42]

first = 0
last = len(alist)-1
found = False
item = int(input())
while first<=last and not found:
    midpoint = (first + last)//2
    if alist[midpoint] == item:
        found = True
    elif item < alist[midpoint]:
                last = midpoint-1
    else:
        first = midpoint+1

if found:
    print('find')
else:
    print('not found')

#--------- merge sort ---------#

import sys
def merge_sort2(A, first, last):
    if first < last:
        middle = (first + last)//2
        merge_sort2(A, first, middle)
        merge_sort2(A, middle+1, last)
        merge(A, first, middle, last)

def merge(A, first, middle, last):
    L = A[first:middle+1]
    R = A[middle+1:last+1]
    L.append(sys.maxsize)
    R.append(sys.maxsize)
    i = j = 0

    for k in range (first, last+1):
        if L[i] <= R[j]:
            A[k] = L[i]
            i += 1
        else:
            A[k] = R[j]
            j += 1
    
    
A = [5,9,1,2,4,8,6,3,7]
print(A)

merge_sort2(A,0,len(A)-1)
print(A)

#--------- bubble sort 2 ---------#

def bubbleSort(nlist):
    for passnum in range(len(nlist)-1,0,-1):
        for i in range(passnum):
            if nlist[i]>nlist[i+1]:
                temp = nlist[i]
                nlist[i] = nlist[i+1]
                nlist[i+1] = temp

nlist = [14,46,43,27,57,41,45,21,70]
bubbleSort(nlist)
print(nlist)
